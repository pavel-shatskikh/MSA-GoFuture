@startuml Container_Diagram_Full_Infrastructure
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

Person(passenger, "Пассажир", "Заказывает поездки")
Person(driver, "Водитель", "Принимает заказы и получает выплаты")
Person(manager, "Корпоративный менеджер", "Управляет счетами")
Person(accountant, "Бухгалтер", "Контролирует выплаты")
Person(dev_engineer, "Разработчик", "Разрабатывает новые функции")
Person(sre_engineer, "SRE инженер", "Мониторит и поддерживает систему")

System_Boundary(go_future_system, "GoFuture Platform") {
    ' ### КЛИЕНТСКИЕ ПРИЛОЖЕНИЯ ###
    Container(web_passenger, "Пассажирское приложение", "iOS/Android/Huawei", "Интерфейс для пассажиров")
    Container(web_driver, "Водительское приложение", "iOS/Android/Huawei", "Интерфейс для водителей")
    Container(web_portal, "Корпоративный веб-портал", "Web Application", "Управление заказами")
    Container(admin_portal, "Админ-панель", "Web Application", "Управление выплатами")
    
    ' ### ОСНОВНОЙ МОНОЛИТ ###
    Container(app_monolith, "GoFuture Monolith", "Django Application", "Содержит всю бизнес-логику")
    
    ' ### БАЗЫ ДАННЫХ ###
    ContainerDb(db_main, "Основная БД", "PostgreSQL RDS", "Хранит все бизнес-данные")
    ContainerDb(db_cache, "In-memory кэш", "Redis", "Кэширование данных")
    ContainerDb(db_search, "Поисковый индекс", "Elasticsearch", "Геопоиск водителей")
    
    ' ### ОЧЕРЕДИ И ВОРКЕРЫ ###
    ContainerQueue(mq_broker, "Брокер сообщений", "RabbitMQ", "Очередь для фоновых задач")
    Container(app_worker, "Воркеры фоновых задач", "Celery", "Обработка асинхронных задач")
    
    ' ### МОНИТОРИНГ И OBSERVABILITY ###
    Container(monitoring, "Prometheus", "Monitoring System", "Сбор метрик и мониторинг")
    Container(grafana, "Grafana", "Dashboard System", "Визуализация метрик и дашборды")
    Container(loki, "Loki", "Log Aggregation", "Сбор и анализ логов")
    Container(alert_manager, "Alertmanager", "Alert System", "Управление алертами")
    
    ' ### CI/CD ИНФРАСТРУКТУРА ###
    Container(jenkins, "Jenkins", "CI/CD Server", "Сборка и деплой монолита")
    Container(artifact_repo, "Artifact Repository", "Docker Registry", "Хранение образов приложения")
    Container(ci_worker, "CI/CD Workers", "VM/Containers", "Выполнение задач сборки и тестов")
    
    ' ### АНАЛИТИЧЕСКАЯ ИНФРАСТРУКТУРА ###
    Container(analytics_engine, "Analytics Engine", "Spark/Flink", "Обработка аналитических данных")
    Container(analytics_db, "Analytics DB", "ClickHouse", "Хранение аналитических данных")
    Container(datalens, "DataLens", "BI Tool", "Визуализация бизнес-метрик")
}

' ### ВНЕШНИЕ СИСТЕМЫ ###
System_Ext(yandex_pay, "Яндекс.Пэй", "Платежный шлюз")
System_Ext(yandex_maps, "Яндекс.Карты", "Картографический сервис")
System_Ext(fcm, "FCM", "Push-сервис Google")
System_Ext(apns, "APNs", "Push-сервис Apple")
System_Ext(huawei_push, "Huawei Push Kit", "Push-сервис Huawei")
System_Ext(bank_api, "API Банка", "Банковские выплаты")

' ### СВЯЗИ ПОЛЬЗОВАТЕЛЕЙ ###
Rel(passenger, web_passenger, "Использует")
Rel(driver, web_driver, "Использует")
Rel(manager, web_portal, "Использует")
Rel(accountant, admin_portal, "Использует")
Rel(dev_engineer, jenkins, "Запускает сборки")
Rel(sre_engineer, grafana, "Мониторит систему")
Rel(sre_engineer, alert_manager, "Настраивает алерты")

' ### БИЗНЕС-ЛОГИКА ###
Rel(web_passenger, app_monolith, "HTTP/REST API")
Rel(web_driver, app_monolith, "HTTP/REST API")
Rel(web_portal, app_monolith, "HTTP/REST API")
Rel(admin_portal, app_monolith, "HTTP/REST API")

Rel(app_monolith, db_main, "Чтение/запись (ORM)")
Rel(app_monolith, db_cache, "Кэширование данных")
Rel(app_monolith, db_search, "Геопоиск водителей")
Rel(app_monolith, mq_broker, "Отправка задач")

Rel(app_monolith, yandex_pay, "Обработка платежей")
Rel(app_monolith, yandex_maps, "Запросы геоданных")
Rel(app_monolith, bank_api, "Инициирование выплат")

' ### ASYNC WORKERS ###
Rel(app_worker, mq_broker, "Получает задачи из", "AMQP")
Rel(app_worker, db_main, "Чтение/запись данных", "ORM")
Rel(app_worker, db_main, "Сохраняет результаты", "ORM")
Rel(app_worker, fcm, "Отправляет уведомления", "REST API")
Rel(app_worker, apns, "Отправляет уведомления", "REST API")
Rel(app_worker, huawei_push, "Отправляет уведомления", "REST API")
Rel(app_worker, bank_api, "Выполняет выплаты", "REST API")

' ### МОНИТОРИНГ ###
Rel(app_monolith, monitoring, "Отправляет метрики", "Prometheus Metrics")
Rel(app_worker, monitoring, "Отправляет метрики", "Prometheus Metrics")
Rel(db_main, monitoring, "Метрики БД", "PostgreSQL Exporter")
Rel(mq_broker, monitoring, "Метрики очередей", "RabbitMQ Exporter")

Rel(monitoring, grafana, "Предоставляет данные", "PromQL")
Rel(monitoring, alert_manager, "Отправляет алерты", "Alert Rules")
Rel(alert_manager, sre_engineer, "Отправляет уведомления", "Email/Slack/Pager")

Rel(app_monolith, loki, "Отправляет логи", "Loki Logs")
Rel(app_worker, loki, "Отправляет логи", "Loki Logs")

' ### CI/CD ###
Rel(jenkins, ci_worker, "Запускает задачи", "SSH/API")
Rel(ci_worker, artifact_repo, "Пушит образы", "Docker Push")
Rel(jenkins, artifact_repo, "Деплоит образы", "Docker Pull")
Rel(ci_worker, app_monolith, "Запускает тесты", "Test Execution")

' ### АНАЛИТИКА ###
Rel(app_monolith, analytics_engine, "Отправляет события", "AMQP")
Rel(app_worker, analytics_engine, "Отправляет события", "AMQP")
Rel(analytics_engine, analytics_db, "Записывает данные", "ETL Process")
Rel(analytics_db,datalens, "Предоставляет данные", "SQL Queries")
Rel(datalens, manager, "Бизнес-отчеты", "Dashboards")
Rel(datalens, accountant, "Финансовые отчеты", "Dashboards")

@enduml